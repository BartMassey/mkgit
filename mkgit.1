.TH MKGIT 1 "2025/10/30"
.\" Copyright Â© 2012 Bart Massey
.SH NAME
mkgit \- create an upstream git repo and push to it
.SH SYNOPSIS
mkgit [\fB-p\fP|\fB-d\fP \fI<desc>\fP]
  [ \fB-X\fP \fIsite1\fP|...|github[-\fI<org>\fP]|gitlab[-\fI<site>\fP][-<\fIorg\fP>] [\fB-F] [\fI<project>\fP[.git]]
  | ssh://[\fI<user>\fP@]host/\fI<dir>\fP/\fI<project>\fP[.git]]
  [\fI<source-dir>\fP]
.SH DESCRIPTION
.PP
The
.B mkgit
command is a single-line solution for creating a new
upstream Git repository as the origin for an existing
local repository. That is,
.I mkgit
will create a new repository at the specified upstream
location, push the local repository up there, and set the
local
.B origin
and tracking information to point at the new upstream.
.PP
Both
.B mkgit
(Python, primary implementation) and
.B mkgit.sh
(shell, legacy) versions are available. The examples below
use
.B mkgit
as the primary interface.
.PP
The
.I mkgit
command operates in one of two basic modes. In "normal"
mode, the new upstream is specified by means of an ordinary
SSH URL. In "special" mode, the new upstream is specified
by a bare keyword argument to the
.B "-X"
flag; this both is a handy abbreviation and permits
special-case handling.
.SH USAGE
.PP
.TP
.B "-p"
The resulting upstream will be "private". This means only
that no special care will be taken to make it readable by
others; no symlinking will be done, etc. The default is "public".
.TP
.BI "-d" " <desc>"
Give a description for the repository. if
.B -d
is not specified,
.B -d
the description will be automatically taken from the initial
commit on the main or master branch.
.TP
.BI "-F"
Fork an existing repository rather than creating a new
one. This currently only works for `github.com`. The
repository to fork is assumed to be `origin` in the current
repo. This `origin` will be renamed to `upstream` and
the new `origin` will be the fork if the operation is successful.
.TP
.BI "-X" " <site>"
Instead of requiring a full URL, the
.B "-X"
flag allows specification of a
.I "<site>"
keyword.
.PP
The keyword "github" is special, and allows automatic
creation of GitHub repositories using the GitHub API v3
with OAuth2. For this to work, the
user will have to have a file in
.I "$HOME"
called
.IR ".githubuser" .
The
.I ".githubuser"
file should contain a single line giving the GitHub username
of the target user.
.PP
The user may also have a
.I ".github-oauthtoken"
file in their home directory, containing a single line
giving the GitHub "access token" needed by
the GitHub repository API v3 to create a repo.
If the user does not have a
.I ".github-oauthtoken"
file, they will need to create one: to do so,
follow the instructions at
.I "https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token"
giving the created token a "repo" scope and probably a
"mkgit" note. Then save the token in the
.I ".github-oauthtoken"
file with permissions 0600. The
.I ".github-oauthtoken"
file is portable across machines.
.PP
The keyword "gitlab" is special, and allows automatic
creation of GitLab repositories using the GitLab API v4
with a private token. For this to work, the
user will have to have a file in
.I "$HOME"
called
.IR ".gitlabuser-<site>" .
The
.I ".gitlabuser-<site>"
file should contain a single line giving the GitLab username
of the target user on the target site. Note that
.I "gitlab.com"
is the default site.
A
.I ".gitlab-token-<site>"
should also be present in the home directory.
The
.I ".gitlab-token-<site>"
file should contain a single line giving the GitLab private
access token of the target user on the target site. If the file does not
exist, it will be created using the GitLab API if the user
can give an access password.
.PP
Other keywords correspond to site configuration files. A keyword of
.IR foo ,
for example, would correspond to a configuration file
of
.IR "mkgit-foo" .
Configuration files are searched for in this order:

.IP \(bu 2
Directory specified by
.I MKGIT_SITE_DIR
environment variable
.IP \(bu 2
.I /usr/local/share/mkgit/
.IP \(bu 2
Same directory as the
.I mkgit
executable (fallback)
.LP

These files contain variable assignments such as:

.PP
.nf
    GITHOST=example.com
    PARENT=/storage/git
    REPOLINK=/var/git-links
.fi
.PP

The Python version parses these files directly, while the
shell version sources them.
.SH EXAMPLES
.PP
.nf

    mkgit -d 'example repo' -X github

.fi
Sets up a repository on GitHub. The target repository name is
inferred from the source repository name, which is assumed
to be the current directory.
.PP
.nf

    mkgit -p ssh://remote.example.com/var/cache/git/project.git /tmp/project

.fi
Sets up a repository on the machine
.I "remote.example.com."
The repository is named
.IR "project.git" ,
is sourced from the Git working directory
.IR "/tmp/project" ,
and is not made public.
.PP
.nf

    mkgit -d 'My project' -X gitlab my-project

.fi
Sets up a private GitLab repository on gitlab.com.
.PP
.nf

    mkgit -F -X github

.fi
Forks an existing GitHub repository (origin becomes upstream).
.\"
.SH BUGS
.PP
The implementation has not been thoroughly tested.
.\"
.SH LICENSE
This software is available under the MIT License. See
the file LICENSE.txt in the source distribution for license terms.
.\"
.SH AUTHOR
Bart Massey \fI<bart@cs.pdx.edu>\fP
